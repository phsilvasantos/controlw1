unit Unit48;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, DBGrids, DB, DBClient, StdCtrls, jsedit1, DBLocal,
  DBLocalI, Provider, ibquery, ExtCtrls, classes1;

type

  TForm48 = class(TForm)
    DBGrid1: TDBGrid;
    DataSource1: TDataSource;
    ClientDataSet1: TIBClientDataSet;
    ClientDataSet2: TClientDataSet;
    ClientDataSet2cod: TIntegerField;
    ClientDataSet2quant: TCurrencyField;
    Panel1: TPanel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label1: TLabel;
    procedure DBGrid1KeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure DBGrid1CellClick(Column: TColumn);
    procedure DBGrid1KeyPress(Sender: TObject; var Key: Char);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure ClientDataSet1AfterPost(DataSet: TDataSet);
    procedure Button1Click(Sender: TObject);
    procedure ClientDataSet1AfterEdit(DataSet: TDataSet);
    procedure DBGrid1DrawDataCell(Sender: TObject; const Rect: TRect;
      Field: TField; State: TGridDrawState);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
  private
    inseriuFornecedor : boolean;
    procedure escondeCampos();
    procedure alteraUnidade();
    procedure alteraProduto();
    procedure limparProduto();
    procedure insereEntrada();
    procedure insereDadosAdic(const fornec : string);
    function  verificaSeExiste(const cod : String) : boolean;
    procedure cadastraProdutos(const verifica : boolean = true);
    function  verificaCodigosDeBarrasDosProdutos() : string;
    procedure lerProdutosParaDarEntrada(var lista : TItensProduto);
    procedure mostraNomesCampos();
    { Private declarations }
  public
    fornecedor        : String;
    fornec, xml : TStringList;
    erro : string;
    caminhoXML, chave, nota : String;
    function verificaOK(msg : boolean = true; LINHA : boolean = false) : boolean;
    function insereFornec : String;
    procedure salvarArq();
    procedure limpaOK();

    { Public declarations }
  end;                     

var
  Form48: TForm48;
const
  corColunaCorrigir : String = '5F9EA0'; 

implementation

uses func, Unit1, principal, buscaSelecao, cadproduto, StrUtils, unid,
  Math;

{$R *.dfm}
procedure TForm48.insereDadosAdic(const fornec : string);
var
  tipo, serie, cfop, tipofrete : string;
  fe : TStringList;
begin
  fe := funcoes.dadosAdicSped(xml.GetText);
  fe[10] := copy(StrNum(fe[10]),1, 44);

  dm.IBQuery1.Close;
  dm.IBQuery1.SQL.Clear;
  dm.IBQuery1.SQL.Add('update or insert into SPEDDADOSADIC(nota, fornec, tipo, serie, cfop, tipofrete, totseg, totdesc, TOTDESCNT' +
  ', TOTDESPACES, TOTPIS, TOTCONFINS, CREDICMS, CHAVENFE, TOTFRETE) values(:nota, :fornec, :tipo, :serie, :cfop, :tipofrete, :totseg,' +
  ' :totdesc, :TOTDESCNT, :TOTDESPACES, :TOTPIS, :TOTCONFINS, :CREDICMS, :CHAVENFE, :TOTFRETE) matching(CHAVENFE)');
  dm.IBQuery1.ParamByName('nota').AsString          := nota;
  dm.IBQuery1.ParamByName('fornec').AsString        := fornec;
  dm.IBQuery1.ParamByName('tipo').AsString          := fe[0];
  dm.IBQuery1.ParamByName('serie').AsString         := fe[1];
  dm.IBQuery1.ParamByName('cfop').AsString          := fe[2];
  dm.IBQuery1.ParamByName('tipofrete').AsString     := fe[3];
  dm.IBQuery1.ParamByName('totseg').AsCurrency      := StrToCurr(fe[4]);
  dm.IBQuery1.ParamByName('totdesc').AsCurrency     := StrToCurr(fe[5]);
  dm.IBQuery1.ParamByName('TOTDESCNT').AsCurrency   := 0;
  dm.IBQuery1.ParamByName('TOTDESPACES').AsCurrency := StrToCurr(fe[6]);
  dm.IBQuery1.ParamByName('TOTPIS').AsCurrency      := StrToCurr(fe[7]);
  dm.IBQuery1.ParamByName('TOTCONFINS').AsCurrency  := StrToCurr(fe[8]);
  dm.IBQuery1.ParamByName('CREDICMS').AsCurrency    := 0;
  dm.IBQuery1.ParamByName('CHAVENFE').AsString      := fe[10];
  dm.IBQuery1.ParamByName('TOTFRETE').AsCurrency    := StrToCurr(fe[11]);
  dm.IBQuery1.ExecSQL;

  dm.IBQuery1.Transaction.Commit;
end;

function TForm48.verificaSeExiste(const cod : String) : boolean;
begin
  dm.IBselect.Close;
  dm.IBselect.SQL.Clear;
  dm.IBselect.SQL.Add('select nota from entrada where nota = :nota');
  dm.IBselect.ParamByName('nota').AsString := cod;
  dm.IBselect.Open;

  Result := not dm.IBselect.IsEmpty;
  dm.IBselect.Close;
end;

function TForm48.insereFornec() : string;
var
  cod : string;
begin
  dm.IBselect.Close;
  dm.IBselect.SQL.Clear;
  dm.IBselect.SQL.Add('select cod from FORNECEDOR where cnpj = :cnpj' );
  dm.IBselect.ParamByName('cnpj').AsString := fornec[0];
  dm.IBselect.Open;

  Result := '0';

  if not dm.IBselect.IsEmpty then
    begin
      Result := dm.IBselect.fieldbyname('cod').AsString;
      fornecedor := result;
      cod        := Result;
      dm.IBselect.Close;
      //exit;
    end;
  dm.IBselect.Close;

  if Result = '0' then
    begin
      cod := Incrementa_Generator('FORNECEDOR', 1);
      //cod := Incrementa_Generator('FORNECEDOR', 0);
      //cod := IntToStr(StrToInt(cod) + 1);
      Result := cod;
    end;
    
  fornecedor := result;

  dm.IBQuery4.Close;
  dm.IBQuery4.SQL.Clear;
  dm.IBQuery4.SQL.Add('update or insert into FORNECEDOR(cod, nome, endereco, cep, fone, cidade, estado, bairro, cnpj,'  +
  'ies, cod_mun, tipo) values(:cod, :nome, :endereco, :cep, :fone, :cidade, :estado, :bairro, :cnpj,'  +
  ':ies, :cod_mun, :tipo)' );
  dm.IBQuery4.ParamByName('cod').AsString      := cod;
  dm.IBQuery4.ParamByName('nome').AsString     := LeftStr(fornec[1], 40);
  dm.IBQuery4.ParamByName('endereco').AsString := LeftStr(fornec[3], 40);
  dm.IBQuery4.ParamByName('cep').AsString      := LeftStr(fornec[8], 10);
  dm.IBQuery4.ParamByName('fone').AsString     := LeftStr(fornec[11], 14);
  dm.IBQuery4.ParamByName('cidade').AsString   := LeftStr(fornec[6], 14);
  dm.IBQuery4.ParamByName('estado').AsString   := fornec[7];
  dm.IBQuery4.ParamByName('bairro').AsString   := LeftStr(fornec[4], 25);
  dm.IBQuery4.ParamByName('cnpj').AsString     := fornec[0];
  dm.IBQuery4.ParamByName('ies').AsString      := fornec[12];
  dm.IBQuery4.ParamByName('cod_mun').AsString  := fornec[5];
  dm.IBQuery4.ParamByName('tipo').AsString     := '2';
  dm.IBQuery4.ExecSQL;
  dm.IBQuery4.Transaction.Commit;

  //reStartGenerator('fornecedor', StrToInt(fornecedor));
end;

procedure TForm48.insereEntrada();
var
  nota : string;
  total, quant1, p_compra, qtd, p_venda : currency;
  lista : TItensProduto;
  i : integer;
begin
  erro := '';
  dm.IBselect.Close;
  dm.IBselect.SQL.Clear;
  dm.IBselect.SQL.Add('select nota from entrada where nota = :nota and fornec = :fornec');
  dm.IBselect.ParamByName('nota').AsString   := ClientDataSet1.fieldbyname('nota').AsString;
  dm.IBselect.ParamByName('fornec').AsString := fornecedor;
  dm.IBselect.Open;

  if not dm.IBselect.IsEmpty then
    begin
      dm.IBselect.Close;
      ShowMessage('A nota '+ ClientDataSet1.fieldbyname('nota').AsString +' já foi lançada no estoque');
      erro := 'erro';
      exit;
    end;
  dm.IBselect.Close;

  if dm.IBQuery4.Transaction.InTransaction then dm.IBQuery4.Transaction.Commit;
  dm.IBQuery4.Transaction.StartTransaction;

  nota   := ClientDataSet1.fieldbyname('nota').AsString;
  total  := ClientDataSet1.fieldbyname('totnota').AsCurrency;
  if fornecedor = '' then insereFornec();

  dm.IBQuery4.Close;
  dm.IBQuery4.SQL.Clear;
  dm.IBQuery4.SQL.Add('update or insert into entrada(nota, data,chegada,total_nota,fornec) VALUES  (:nota, :data,:chegada,:total_nota,:fornec) matching(nota) ');
  dm.IBQuery4.ParamByName('nota').AsString         := nota;
  dm.IBQuery4.ParamByName('chegada').AsDateTime    := form22.datamov;
  dm.IBQuery4.ParamByName('total_nota').AsCurrency := total;
  dm.IBQuery4.ParamByName('data').AsDateTime       := ClientDataSet1.fieldbyname('data').AsDateTime;
  dm.IBQuery4.ParamByName('fornec').AsString       := fornecedor;
  try
    dm.IBQuery4.ExecSQL;
  except
    erro := 'erro';
  end;

  ClientDataSet1.DisableControls;
  ClientDataSet1.First;
  while not ClientDataSet1.Eof do
    begin
      dm.IBQuery4.Close;
      dm.IBQuery4.SQL.Clear;
      dm.IBQuery4.SQL.Add('update or insert into item_entrada(COD,codentrada, QUANT, P_COMPRA, DESTINO, USUARIO, NOTA, FORNEC,DATA, total, unid, unid2)' +
      ' values(:COD,'+funcoes.novocod('entrada')+',:QUANT, :P_COMPRA, :DESTINO, :USUARIO,  :NOTA,:FORNEC, :DATA,:total, :unid, :unid2) matching(codentrada)');
      dm.IBQuery4.ParamByName('data').AsDateTime     := form22.datamov;
      dm.IBQuery4.ParamByName('cod').AsString        := ClientDataSet1.fieldbyname('codigo').AsString;
      dm.IBQuery4.ParamByName('nota').AsString       := ClientDataSet1.fieldbyname('nota').AsString;
      dm.IBQuery4.ParamByName('FORNEC').AsString     := fornecedor;
      dm.IBQuery4.ParamByName('quant').AsCurrency    := quant1 + ClientDataSet1.fieldbyname('QUANTIDADE_NFE').AsCurrency;
      dm.IBQuery4.ParamByName('P_compra').AsCurrency := ClientDataSet1.fieldbyname('PRECO_NFE').AsCurrency;
      dm.IBQuery4.ParamByName('destino').AsInteger   := 1;
      dm.IBQuery4.ParamByName('usuario').AsString    := form22.codusario;
      dm.IBQuery4.ParamByName('total').AsCurrency    := ClientDataSet1.fieldbyname('total').AsCurrency;
      dm.IBQuery4.ParamByName('unid').AsString       := ClientDataSet1.fieldbyname('UNID_ENTRADA').AsString;
      dm.IBQuery4.ParamByName('unid2').AsString      := ClientDataSet1.fieldbyname('UNID_VENDA').AsString;

      try
        dm.IBQuery4.ExecSQL;
      except
        erro := 'erro';
      end;

     ClientDataSet1.Next; 
   end;


  lerProdutosParaDarEntrada(lista);

  for i := 0 to lista.Count -1 do
    begin
    
      dm.IBQuery4.Close;
      dm.IBQuery4.SQL.Clear;
      dm.IBQuery4.SQL.Add('update produto set QUANT = QUANT + :quant, p_venda = :p_venda, p_compra = :p_compra, unid2 = :unid2, REFNFE = :REFNFE, '+
      'classif = :ncm where cod = :cod');
      dm.IBQuery4.ParamByName('quant').AsCurrency    := lista[i].quant;
      dm.IBQuery4.ParamByName('p_venda').AsCurrency  := lista[i].PERC_ICM;
      dm.IBQuery4.ParamByName('p_compra').AsCurrency := lista[i].preco;
      dm.IBQuery4.ParamByName('unid2').AsString      := lista[i].unid;
      dm.IBQuery4.ParamByName('cod').AsInteger       := lista[i].cod;
      dm.IBQuery4.ParamByName('REFNFE').AsString     := lista[i].nome;
      dm.IBQuery4.ParamByName('ncm').AsString        := lista[i].ncm;
      try
        dm.IBQuery4.ExecSQL;
      except
        erro := 'erro';
      end;

    end;

    lista.Free;
    insereDadosAdic(fornecedor);
    if dm.IBQuery4.Transaction.InTransaction then dm.IBQuery4.Transaction.Commit;
    if dm.IBQuery1.Transaction.InTransaction then dm.IBQuery1.Transaction.Commit;

    funcoes.copiaXMLEntrada(caminhoXML, chave);
    DeleteFile(caminhoEXE_com_barra_no_final + fornecedor + '-' + nota + '.xml');
end;

function TForm48.verificaOK(msg : boolean = true; LINHA : boolean = false) : boolean;
var
  i, a, lin : integer;

begin
  Result := false;
  a := 0;
  erro := '';
  lin := 0;

  if LINHA then
    begin
      dm.IBselect.Close;
      dm.IBselect.SQL.Clear;
      dm.IBselect.SQL.Add('select cod from produto where cod = :cod');
      dm.IBselect.ParamByName('cod').AsString := ClientDataSet1.fieldbyname('codigo').AsString;
      dm.IBselect.Open;

      if dm.IBselect.IsEmpty then
        begin
          a := a + 1;
          lin := lin + 1;
          erro := erro + 'Produto: ' + ClientDataSet1.fieldbyname('DESCRICAO_FORNECEDOR').AsString + ' não encontrado no Estoque;' + #13;
        end;

      if ClientDataSet1.fieldbyname('UNID_ENTRADA').AsString = '' then
        begin
          a := a + 1;
          lin := lin + 1;
          erro := erro + 'UNIDADE do produto: ' + ClientDataSet1.fieldbyname('DESCRICAO_FORNECEDOR').AsString + ' não foi Preenchida' + #13;
        end;

      if ClientDataSet1.fieldbyname('ALIQ').AsString = '' then
        begin
          a := a + 1;
          lin := lin + 1;
          erro := erro + 'ALIQUOTA do produto: ' + ClientDataSet1.fieldbyname('DESCRICAO_FORNECEDOR').AsString + ' não foi Preenchida' + #13;
        end;

      if lin > 0 then
        begin
          ClientDataSet1.Open;
          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('ok').AsString := '';
          ClientDataSet1.Post;
        end
      else
        begin
          ClientDataSet1.Open;
          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('ok').AsString := 'X';
          ClientDataSet1.Post;
        end;
      exit;
    end;


  i := ClientDataSet1.fieldbyname('codigo').AsInteger;
  ClientDataSet1.DisableControls;
  ClientDataSet1.First;
  while not ClientDataSet1.Eof do
    begin
      lin := 0;
      dm.IBselect.Close;
      dm.IBselect.SQL.Clear;
      dm.IBselect.SQL.Add('select cod from produto where cod = :cod');
      dm.IBselect.ParamByName('cod').AsString := ClientDataSet1.fieldbyname('codigo').AsString;
      dm.IBselect.Open;

      if dm.IBselect.IsEmpty then
        begin
          a := a + 1;
          lin := lin + 1;
          erro := erro + 'Produto: ' + ClientDataSet1.fieldbyname('DESCRICAO_FORNECEDOR').AsString + ' não encontrado no Estoque;' + #13;
        end;

      if ClientDataSet1.fieldbyname('UNID_ENTRADA').AsString = '' then
        begin
          a := a + 1;
          lin := lin + 1;
          erro := erro + 'UNIDADE do produto: ' + ClientDataSet1.fieldbyname('DESCRICAO_FORNECEDOR').AsString + ' não foi Preenchida' + #13;
        end;

      if ClientDataSet1.fieldbyname('ALIQ').AsString = '' then
        begin
          a := a + 1;
          lin := lin + 1;
          erro := erro + 'ALIQUOTA do produto: ' + ClientDataSet1.fieldbyname('DESCRICAO_FORNECEDOR').AsString + ' não foi Preenchida' + #13;
        end;

      if lin > 0 then
        begin
          ClientDataSet1.Open;
          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('ok').AsString := '';
          ClientDataSet1.Post;
        end
      else
        begin
          ClientDataSet1.Open;
          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('ok').AsString := 'X';
          ClientDataSet1.Post;
        end;

      ClientDataSet1.Next;
    end;

  if a > 0 then
    begin
      if msg then ShowMessage('Ocorreram '+ IntToStr(a) +' Erros, Verifique: ' + #13 + erro);
    end
  else Result := true;
  ClientDataSet1.First;
  ClientDataSet1.EnableControls;  
end;


procedure TForm48.alteraUnidade();
var
  qtd : currency;
  mu, codTMP : integer;
  cod, cod1 : String;
begin
  cod := funcoes.localizar('Localizar Unidades', 'unid', 'UNID_ENT, UNID_SAI', 'UNID_ENT, UNID_SAI', '', 'UNID_ENT', 'UNID_ENT', false, false, false, '', 0, nil);
  if ((cod = '*') or (cod = '')) then exit;


  cod1 := copy(cod, pos('-', cod) + 1, length(cod));
  cod  := copy(cod, 1, pos('-', cod) - 1);

  {dm.IBselect.Close;
  dm.IBselect.SQL.Clear;
  dm.IBselect.SQL.Add('select * from unid where UNID_ENT = :cod');
  dm.IBselect.ParamByName('cod').AsString := cod;
  dm.IBselect.Open;
  }
  qtd := funcoes.verValorUnidade(cod);
  //dm.IBselect.Close;

  codTMP := ClientDataSet1.RecNo -1; 
  try

    ClientDataSet1.DisableControls;
    ClientDataSet1.Edit;
    ClientDataSet1.FieldByName('UNID_ENTRADA').AsString := cod;
    ClientDataSet1.FieldByName('UNID_VENDA').AsString   := cod1;
    ClientDataSet1.FieldByName('mu').AsInteger          := trunc(qtd);
    ClientDataSet1.FieldByName('QUANTIDADE_ENT').AsCurrency := qtd;
    ClientDataSet1.FieldByName('PRECO_NOVO').AsCurrency := Arredonda((ClientDataSet1.FieldByName('PRECO_NFE').AsCurrency + (ClientDataSet1.FieldByName('PRECO_NFE').AsCurrency * StrToCurrDef(ClientDataSet1.FieldByName('LUCRO').AsString, 0) / 100)) / StrToCurrDef(ClientDataSet1.FieldByName('QUANTIDADE_ENT').AsString, 1), 2);
    ClientDataSet1.FieldByName('PRECO_COMPRA').AsCurrency := Arredonda(ClientDataSet1.FieldByName('PRECO_NFE').AsCurrency / StrToCurrDef(ClientDataSet1.FieldByName('QUANTIDADE_ENT').AsString, 1), 2);
    ClientDataSet1.Post;
    //verificaOK();
  finally
    ClientDataSet1.First;
    ClientDataSet1.MoveBy(codTMP);
    ClientDataSet1.EnableControls;
  end;
end;


procedure TForm48.DBGrid1KeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  cod    : string;
  codTMP : integer;
begin
  if key = 113 then //F2
    begin
      salvarArq();
      ShowMessage('A Entrada foi salva com sucesso');
    end;

  if key = 46 then
    begin
      if DBGrid1.SelectedField.FieldName = 'CODIGO' then
        begin
          limparProduto();
          verificaOK(false, true);
          exit;
        end;

      if DBGrid1.SelectedField.FieldName = 'PRECO_ATUAL' then
        begin
          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('PRECO_ATUAL').AsCurrency := ClientDataSet1.FieldByName('PRECO_NOVO').AsCurrency;
          ClientDataSet1.Post;
          exit;
        end;

      if DBGrid1.SelectedField.FieldName = 'CODBAR_ATUAL' then
        begin
          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('CODBAR_ATUAL').AsCurrency := ClientDataSet1.FieldByName('CODBAR').AsCurrency;
          ClientDataSet1.Post; 
          exit;
        end;
    end;

  if key = 114 then //F3
    begin
      //alteraUnidade();
      if ClientDataSet1.FieldByName('codigo').IsNull then
        begin
          ShowMessage('Codigo de Produto Inválido');
          exit;
        end;

      form9 := tform9.Create(self);
      jsedit.SetTabelaDoBd(form9, 'produto', dm.IBQuery1);
      form9.cod.Text := ClientDataSet1.FieldByName('codigo').AsString;
      jsedit.SelecionaDoBD(form9.Name);
      form9.ShowModal;
      JsEdit.LiberaMemoria(form9);
      form9.Free;
    end;

  if key = 115 then //F4
    begin
      cod := verificaCodigosDeBarrasDosProdutos();
      if cod <> '' then
        begin
          if cod <> '1' then MessageDlg(cod, mtError, [mbok], 1);
          exit;
        end;
      cadastraProdutos();
    end;

  if key = 116 then //F5
    begin
      form47 := tform47.Create(self);
      form47.ShowModal;
      form47.Free;
    end;
end;

procedure TForm48.DBGrid1CellClick(Column: TColumn);
var
  cod : string;
  mu : currency;
begin
  if Column.FieldName = 'UNIDADE' then
    begin
      alteraUnidade();
    end;
end;

procedure TForm48.DBGrid1KeyPress(Sender: TObject; var Key: Char);
var
  sim, nou : string;
  preco : currency;
begin
  if key = #27 then
    begin
      sim := funcoes.dialogo('generico',0,'SN'+#8,0,false,'S','Control For Windows','Deseja Gravar Esta Entrada de Produtos?S/N:','N') ;
      if sim = '*' then exit;
      if sim = 'N' then
        begin
          salvarArq();
          close;
        end;
      if sim = 'S' then
        begin
          nou := verificaCodigosDeBarrasDosProdutos();
          if nou <> '' then
            begin
              MessageDlg(nou, mtError, [mbOK], 1);
              exit;
            end;
          cadastraProdutos(false);
          if verificaOK then
            begin
              insereEntrada();
              if erro = '' then close;
            end;
        end;
    end;

  if key = #13 then
    begin
      if DBGrid1.SelectedField.FieldName = 'PRECO_ATUAL' then
        begin
          preco := StrToCurrDef(ClientDataSet1.fieldbyname('PRECO_ATUAL').AsString, 0);
          if preco = 0 then preco := StrToCurrDef(ClientDataSet1.fieldbyname('PRECO_NOVO').AsString, 0);
          sim := funcoes.dialogo('numero',0,'',2,true,'S',Application.Title,'Qual o Preço de Venda ?', formataCurrency(preco));
          if sim = '*' then exit;

          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('PRECO_ATUAL').AsCurrency  := StrToCurrDef(sim, 0);
          ClientDataSet1.Post;
        end;

      if DBGrid1.SelectedField.FieldName = 'PRECO_COMPRA' then
        begin
          sim := funcoes.dialogo('numero',0,'',3,true,'S',Application.Title,'Qual o Preço de Compra ?', formataCurrency(ClientDataSet1.FieldByName('PRECO_COMPRA').AsCurrency));
          if sim = '*' then exit;

          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('PRECO_COMPRA').AsCurrency  := StrToCurrDef(sim, 0);
          ClientDataSet1.Post;
        end;

      if DBGrid1.SelectedField.FieldName = 'ALIQ' then
        begin
          sim := funcoes.localizar('Localizar Aliquota','aliq','cod,aliq,reducao,cst','cod','','cod','cod',false,false,false,'',430,sender);
          if sim = '' then exit;

          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('ALIQ').AsString  := sim;
          ClientDataSet1.Post;

          verificaOK(false, true);
        end;

      if DBGrid1.SelectedField.FieldName = 'LUCRO' then
        begin
          sim := funcoes.dialogo('numero',0,'',2,false,'X',Application.Title,'Qual o Lucro?',formataCurrency(ClientDataSet1.FieldByName('LUCRO').AsCurrency));
          if sim = '*' then exit;

          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('LUCRO').AsCurrency      := StrToCurrDef(sim, 0);
          ClientDataSet1.FieldByName('PRECO_NOVO').AsCurrency := Arredonda((ClientDataSet1.FieldByName('PRECO_NFE').AsCurrency + (ClientDataSet1.FieldByName('PRECO_NFE').AsCurrency * StrToCurrDef(sim, 0) / 100)) / StrToCurrDef(ClientDataSet1.FieldByName('QUANTIDADE_ENT').AsString, 1), 2);
          ClientDataSet1.Post;
        end;

      if DBGrid1.SelectedField.FieldName = 'DESCRICAO_ATUAL' then
        begin
          sim := funcoes.dialogo('normal',0,'',150,false,'X',Application.Title,'Qual a Descrição?', IfThen(ClientDataSet1.FieldByName('DESCRICAO_ATUAL').AsString = '', ClientDataSet1.FieldByName('DESCRICAO_FORNECEDOR').AsString ,ClientDataSet1.FieldByName('DESCRICAO_ATUAL').AsString) );
          if sim = '*' then exit;

          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('DESCRICAO_ATUAL').AsString := sim;
          ClientDataSet1.Post;
        end;

      if DBGrid1.SelectedField.FieldName = 'REFORI' then
        begin
          sim := funcoes.dialogo('normal',0,'',150,false,'X',Application.Title,'Qual a Referência?',ClientDataSet1.FieldByName('REFORI').AsString);
          if sim = '*' then exit;

          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('REFORI').AsString := sim;
          ClientDataSet1.Post;
        end;

      if DBGrid1.SelectedField.FieldName = 'CODBAR_ATUAL' then
        begin
          sim := funcoes.dialogo('normal',0,'',150,false,'X',Application.Title,'Qual o Cód. Barras?',ClientDataSet1.FieldByName('CODBAR').AsString);
          if sim = '*' then exit;

          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString := sim;
          ClientDataSet1.Post;
        end;

      if DBGrid1.SelectedField.FieldName = 'UNID_ENTRADA' then
        begin
          alteraUnidade();
          verificaOK(false, true);
        end;

      if DBGrid1.SelectedField.FieldName = 'CODIGO' then
        begin
          alteraProduto();
          verificaOK(false, true);
        end;
    end;
end;

procedure TForm48.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  jsedit.LiberaMemoria(self);
end;

procedure TForm48.FormShow(Sender: TObject);
begin
  JsEdit.SetTabelaDoBd(self, 'unid', dm.IBQuery1);
  insereFornec();
  escondeCampos();
  ClientDataSet1.First;
  funcoes.FormataCampos(tibquery(ClientDataSet1), 2, '', 2);
  verificaOK(false, false);
  mostraNomesCampos();
end;

procedure TForm48.ClientDataSet1AfterPost(DataSet: TDataSet);
begin
 { if self.Showing then
    begin
      DeleteFile(caminhoEXE_com_barra_no_final + fornecedor + '-' + nota + '.xml');
      ClientDataSet1.SaveToFile(caminhoEXE_com_barra_no_final + fornecedor + '-' + nota + '.xml');
    end;
}end;

procedure TForm48.Button1Click(Sender: TObject);
begin
  ClientDataSet1.LoadFromFile(caminhoEXE_com_barra_no_final + 'ent_arq.xml');
end;

procedure TForm48.ClientDataSet1AfterEdit(DataSet: TDataSet);
begin
  ClientDataSet1.SaveToFile(caminhoEXE_com_barra_no_final + 'ent_arq.xml');
end;

procedure TForm48.alteraProduto();
var
  codTMP : integer;
  cod, aliq    : String;
  qtd : currency;
begin
  cod := funcoes.localizar('Localizar Produto','produto','cod, nome,quant, p_venda as preco ','cod','','nome','nome',false,false,false,'',600, nil);
  if ((cod = '*') or (cod = '')) then exit;

  dm.IBselect.Close;
  dm.IBselect.SQL.Clear;
  dm.IBselect.SQL.Add('select nome, cod, codbar, p_venda, unid, unid2, aliquota, p_compra from produto where cod = :cod');
  dm.IBselect.ParamByName('cod').AsString := cod;
  dm.IBselect.Open;

  codTMP := ClientDataSet1.RecNo -1;
  try
    ClientDataSet1.DisableControls;
    ClientDataSet1.Edit;
    ClientDataSet1.FieldByName('codigo').AsString          := dm.IBselect.fieldbyname('cod').AsString;
    ClientDataSet1.FieldByName('DESCRICAO_ATUAL').AsString := dm.IBselect.fieldbyname('nome').AsString;
    ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString    := dm.IBselect.fieldbyname('codbar').AsString;
    ClientDataSet1.FieldByName('PRECO_ATUAL').AsCurrency   := dm.IBselect.fieldbyname('p_venda').AsCurrency;
    ClientDataSet1.FieldByName('UNID_ENTRADA').AsString    := dm.IBselect.fieldbyname('unid2').AsString;
    ClientDataSet1.FieldByName('UNID_VENDA').AsString      := dm.IBselect.fieldbyname('unid').AsString;
    ClientDataSet1.FieldByName('ALIQ').AsString            := IntToStr(StrToIntDef(dm.IBselect.fieldbyname('aliquota').AsString, 2));
    ClientDataSet1.FieldByName('QUANTIDADE_ENT').AsCurrency := funcoes.verValorUnidade(ClientDataSet1.FieldByName('UNID_ENTRADA').AsString);

    qtd := ClientDataSet1.FieldByName('QUANTIDADE_ENT').AsCurrency;
    if qtd > 1 then ClientDataSet1.FieldByName('PRECO_COMPRA').AsCurrency  := Arredonda( ClientDataSet1.FieldByName('PRECO_NFE').AsCurrency / qtd, 2);

    ClientDataSet1.Post;
    //verificaOK();
  finally
    ClientDataSet1.First;
    ClientDataSet1.MoveBy(codTMP);
    ClientDataSet1.EnableControls;
  end;
end;

procedure TForm48.salvarArq();
begin
  DeleteFile(caminhoEXE_com_barra_no_final + fornecedor + '-' + nota + '.xml');
  ClientDataSet1.SaveToFile(caminhoEXE_com_barra_no_final + fornecedor + '-' + nota + '.xml');
end;

procedure TForm48.escondeCampos();
begin
  form48.ClientDataSet1.IndexFieldNames := 'CONT';
  form48.ClientDataSet1.LogChanges := false;
  form48.ClientDataSet1.FieldByName('totnota').Visible        := false;
  form48.ClientDataSet1.FieldByName('data').Visible           := false;
  //form48.ClientDataSet1.FieldByName('nota').Visible           := false;
  form48.ClientDataSet1.FieldByName('mu').Visible             := false;
  //form48.ClientDataSet1.FieldByName('cont').Visible           := false;
  form48.ClientDataSet1.FieldByName('TOTAL').Visible          := false;
  form48.ClientDataSet1.FieldByName('QUANTIDADE_ENT').Visible := false;

  TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_NFE')).currency      := false;
  TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_COMPRA')).currency      := false;
  TCurrencyField(form48.ClientDataSet1.FieldByName('LUCRO')).currency          := false;
  TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_NOVO')).currency     := false;
  TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_ATUAL')).currency    := false;
  TCurrencyField(form48.ClientDataSet1.FieldByName('QUANTIDADE_NFE')).currency := false;
  TCurrencyField(form48.ClientDataSet1.FieldByName('QUANTIDADE_ENT')).currency := false;
  TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_ATUAL')).currency    := false;
  TCurrencyField(form48.ClientDataSet1.FieldByName('TOTAL')).currency          := false;
  TCurrencyField(form48.ClientDataSet1.FieldByName('TOTAL')).DisplayFormat     := '#,###,###0.000';
  TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_COMPRA')).DisplayFormat   := '#,###,###0.000';
  TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_NOVO')).DisplayFormat     := '#,###,###0.000';
  TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_ATUAL')).DisplayFormat    := '#,###,###0.000';
  TCurrencyField(form48.ClientDataSet1.FieldByName('QUANTIDADE_NFE')).DisplayFormat := '#,###,###0.000';
  TCurrencyField(form48.ClientDataSet1.FieldByName('QUANTIDADE_ENT')).DisplayFormat := '#,###,###0.000';
  TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_NFE')).DisplayFormat    := '#,###,###0.000';
  //TCurrencyField(form48.ClientDataSet1.FieldByName('PRECO_ATUAL')).DisplayFormat    := '#,###,###0.000';
end;

procedure TForm48.cadastraProdutos(const verifica : boolean = true);
var
  cod1 : String;
  ini  : smallint;
  p_compra, p_venda : currency;
begin
  try
  ClientDataSet1.DisableControls;
  ClientDataSet1.First;
  ini := 0;

  while not ClientDataSet1.Eof do
    begin
      if ClientDataSet1.FieldByName('codigo').AsString = '' then
        begin
          if ClientDataSet1.FieldByName('DESCRICAO_ATUAL').AsString = '' then
            begin
              ClientDataSet1.Edit;
              ClientDataSet1.FieldByName('DESCRICAO_ATUAL').AsString := ClientDataSet1.FieldByName('DESCRICAO_FORNECEDOR').AsString;
              ClientDataSet1.Post;
            end;

          if ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString = '' then
            begin
              ClientDataSet1.Edit;
              ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString := ClientDataSet1.FieldByName('CODBAR').AsString;
              ClientDataSet1.Post;
            end;

          if StrToCurrDef(ClientDataSet1.FieldByName('PRECO_ATUAL').AsString, 0) = 0 then
            begin
              ClientDataSet1.Edit;
              ClientDataSet1.FieldByName('PRECO_ATUAL').AsCurrency := ClientDataSet1.FieldByName('PRECO_NOVO').AsCurrency;
              ClientDataSet1.Post;
            end;
        end;

      ClientDataSet1.Next;
    end;

  ClientDataSet1.First;  
  while not ClientDataSet1.Eof do
    begin
      if ClientDataSet1.FieldByName('codigo').AsString = '' then
        begin
          ini      := ini + 1;
          cod1     := Incrementa_Generator('produto', 1);
          p_compra := StrToCurrDef(ClientDataSet1.FieldByName('PRECO_COMPRA').AsString, 0);
          p_venda  := StrToCurrDef(ClientDataSet1.FieldByName('PRECO_ATUAL').AsString, 0);
          if p_venda = 0 then p_venda  := StrToCurrDef(ClientDataSet1.FieldByName('PRECO_NOVO').AsString, 0);

          dm.IBQuery1.Close;
          dm.IBQuery1.SQL.Text := 'insert into produto(cod, nome, p_venda, p_compra, unid, grupo,' +
          'unid2, aliquota, codbar, refori, classif, REFNFE) values(:cod, :nome, :p_venda, :p_compra, :unid, 0,' +
          ':unid2, :aliquota, :codbar, :refori, :classif, :REFNFE)';
          dm.IBQuery1.ParamByName('cod').AsInteger       := StrToInt(cod1);
          dm.IBQuery1.ParamByName('nome').AsString       := ClientDataSet1.FieldByName('DESCRICAO_ATUAL').AsString;
          dm.IBQuery1.ParamByName('p_venda').AsCurrency  := p_venda;//ClientDataSet1.FieldByName('PRECO_NOVO').AsCurrency;
          //dm.IBQuery1.ParamByName('p_compra').AsCurrency := Arredonda(ClientDataSet1.FieldByName('PRECO_NFE').AsCurrency / funcoes.verValorUnidade(ClientDataSet1.FieldByName('UNID_ENTRADA').AsString), 2);
          if p_compra = 0 then p_compra := Arredonda(ClientDataSet1.FieldByName('PRECO_NFE').AsCurrency / funcoes.verValorUnidade(ClientDataSet1.FieldByName('UNID_ENTRADA').AsString), 2);
          dm.IBQuery1.ParamByName('p_compra').AsCurrency := p_compra;
          dm.IBQuery1.ParamByName('unid').AsString       := ClientDataSet1.FieldByName('UNID_VENDA').AsString;
          dm.IBQuery1.ParamByName('unid2').AsString      := ClientDataSet1.FieldByName('UNID_ENTRADA').AsString;
          dm.IBQuery1.ParamByName('aliquota').AsString   := ClientDataSet1.FieldByName('ALIQ').AsString;
          dm.IBQuery1.ParamByName('codbar').AsString     := IfThen(ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString = '', DIGEAN('789000' + funcoes.CompletaOuRepete('', cod1,'0',6)) ,ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString);
          dm.IBQuery1.ParamByName('refori').AsString     := ClientDataSet1.FieldByName('refori').AsString;
          dm.IBQuery1.ParamByName('classif').AsString    := ClientDataSet1.FieldByName('NCM').AsString;
          dm.IBQuery1.ParamByName('REFNFE').AsString     := ClientDataSet1.FieldByName('REF_NFE').AsString;
          dm.IBQuery1.ExecSQL;

          ClientDataSet1.Edit;
          ClientDataSet1.FieldByName('codigo').AsInteger := StrToInt(cod1);
          ClientDataSet1.Post;
        end;

      ClientDataSet1.Next;
    end;

  if dm.IBQuery1.Transaction.InTransaction then dm.IBQuery1.Transaction.Commit;

  if ini > 0 then ShowMessage(IntToStr(ini) + ' Produtos Cadastrados');
  finally
    ClientDataSet1.EnableControls;
    if verifica then verificaOK();
  end;
end;

procedure TForm48.limparProduto();
begin
  ClientDataSet1.Edit;
  ClientDataSet1.FieldByName('codigo').AsString          := '';
  ClientDataSet1.FieldByName('DESCRICAO_ATUAL').AsString := '';
  ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString    := '';
  ClientDataSet1.FieldByName('PRECO_ATUAL').AsCurrency   := 0.00;
  ClientDataSet1.FieldByName('UNID_ENTRADA').AsString    := '';
  ClientDataSet1.FieldByName('UNID_VENDA').AsString      := '';
  ClientDataSet1.Post;
end;

procedure TForm48.DBGrid1DrawDataCell(Sender: TObject; const Rect: TRect;
  Field: TField; State: TGridDrawState);
begin
  if trim(ClientDataSet1.FieldByName('ok').AsString) = '' then
    begin
      DBGrid1.Canvas.Brush.Color := HexToTColor('FF6A6A');
      DBGrid1.Canvas.FillRect(Rect);
      DBGrid1.DefaultDrawDataCell(Rect, Field, State) // Reescreve o valor que vem do banco
    end
  else if ClientDataSet1.FieldByName('ok').AsString = 'C' then begin
    DBGrid1.Canvas.Brush.Color := HexToTColor('228B22');
    DBGrid1.Canvas.FillRect(Rect);
    DBGrid1.DefaultDrawDataCell(Rect, Field, State) // Reescreve o valor que vem do banco
  end;
end;

procedure TForm48.DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  if (Column.Field.FieldName = 'UNID_ENTRADA') then
    begin
      if ClientDataSet1.FieldByName('UNID_ENTRADA').AsString = '' then
        begin
          DBGrid1.Canvas.Brush.Color := HexToTColor(corColunaCorrigir);
          DBGrid1.Canvas.Font.Color  := clWhite;
          DBGrid1.Canvas.FillRect(Rect);
          DBGrid1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
        end;  
    end;

  if (Column.Field.FieldName = 'ALIQ') then
    begin
      if ClientDataSet1.FieldByName('ALIQ').AsString = '' then
        begin
          DBGrid1.Canvas.Brush.Color := HexToTColor(corColunaCorrigir);
          DBGrid1.Canvas.Font.Color  := clWhite;
          DBGrid1.Canvas.FillRect(Rect);
          DBGrid1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
        end;  
    end;


  With DBGrid1 do
    begin
      if (State = [gdSelected]) or (State = [gdFocused]) or
       (State = [gdSelected,gdFocused]) then
         begin
           Canvas.Brush.Color := clSkyBlue;
           Canvas.Font.Color  := clBlack;
           Canvas.FillRect(Rect);
           DefaultDrawDataCell(Rect, Column.Field, State);
         end;
    end;
end;

procedure TForm48.mostraNomesCampos();
begin
  TField(form48.ClientDataSet1.FieldByName('CODIGO')).DisplayLabel               := 'Código';
  TField(form48.ClientDataSet1.FieldByName('DESCRICAO_FORNECEDOR')).DisplayLabel := 'Descrição do Fornecedor(F)';
  TField(form48.ClientDataSet1.FieldByName('DESCRICAO_ATUAL')).DisplayLabel      := 'Descrição do Produto Atual';
  TField(form48.ClientDataSet1.FieldByName('PRECO_NFE')).DisplayLabel            := 'Preço(F)';
  TField(form48.ClientDataSet1.FieldByName('LUCRO')).DisplayLabel                := 'Lucro';
  TField(form48.ClientDataSet1.FieldByName('PRECO_NOVO')).DisplayLabel           := 'Preço Novo';
  TField(form48.ClientDataSet1.FieldByName('PRECO_ATUAL')).DisplayLabel          := 'Preço Atual';
  TField(form48.ClientDataSet1.FieldByName('QUANTIDADE_NFE')).DisplayLabel       := 'Quantidade';
  TField(form48.ClientDataSet1.FieldByName('UNID_NFE')).DisplayLabel             := 'Unid(F)';
  TField(form48.ClientDataSet1.FieldByName('UNID_ENTRADA')).DisplayLabel         := 'Unid. Entrada';
  TField(form48.ClientDataSet1.FieldByName('UNID_VENDA')).DisplayLabel           := 'Unid. Venda';
  TField(form48.ClientDataSet1.FieldByName('ALIQ')).DisplayLabel                 := 'Aliq.';
  TField(form48.ClientDataSet1.FieldByName('CODBAR')).DisplayLabel               := 'Cod. barras(F)';
  TField(form48.ClientDataSet1.FieldByName('CODBAR_ATUAL')).DisplayLabel         := 'Cód. Barras Atual';
  TField(form48.ClientDataSet1.FieldByName('REFORI')).DisplayLabel               := 'Ref. Original';
  TField(form48.ClientDataSet1.FieldByName('REF_NFE')).DisplayLabel              := 'Ref. Fornecedor(F)';
  TField(form48.ClientDataSet1.FieldByName('NCM')).DisplayLabel                  := 'NCM';
  TField(form48.ClientDataSet1.FieldByName('PRECO_NOVO')).DisplayLabel           := 'Preço Novo';
  TField(form48.ClientDataSet1.FieldByName('PRECO_COMPRA')).DisplayLabel         := 'Preço Compra';
end;

function TForm48.verificaCodigosDeBarrasDosProdutos() : string;
var
  tmp, acctmp, querytmp, accCodigos, codtmp : string;
  conttmp : integer;
begin
  try
    limpaOK;
    ClientDataSet1.DisableControls;
    ClientDataSet1.First;
    tmp    := '';
    acctmp := '';
    Result := '';
    while not ClientDataSet1.Eof do
      begin
        if ClientDataSet1.FieldByName('CODIGO').AsString = '' then
         begin
        if ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString <> '' then tmp := ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString
          else tmp := ClientDataSet1.FieldByName('CODBAR').AsString;
        if tmp <> '' then
          begin
            if funcoes.Contido('-' + tmp + '-', acctmp) then begin
               Result     := Result + 'Erro: Cód. Barras ' + tmp + ' Já foi lançado em um produto desta nota' + #13;
               conttmp    := ClientDataSet1.FieldByName('cont').AsInteger;
               accCodigos := '';

               codtmp := tmp;

               ClientDataSet1.First;
               while not ClientDataSet1.Eof do begin
                 if ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString <> '' then tmp := ClientDataSet1.FieldByName('CODBAR_ATUAL').AsString
                   else tmp := ClientDataSet1.FieldByName('CODBAR').AsString;

                 if tmp = codtmp then begin
                   ClientDataSet1.Edit;
                   ClientDataSet1.FieldByName('ok').AsString := 'C';
                   ClientDataSet1.Post;
                 end;
                   
                 ClientDataSet1.Next;
               end;

               MessageDlg('Verifique os Códigos de barras dos Produtos em VERDE', mtInformation, [mbOK], 1);
               Result := '1';
               exit;

            end
              else
                begin
                  if ClientDataSet1.FieldByName('CODIGO').AsString <> '' then querytmp := 'and cod <> ' + ClientDataSet1.FieldByName('CODIGO').AsString
                    else querytmp := '';

                  dm.IBselect.Close;
                  dm.IBselect.SQL.Text := 'select cod, nome from produto where codbar = :codbar ' + querytmp;
                  dm.IBselect.ParamByName('codbar').AsString := tmp;
                  dm.IBselect.Open;

                  if not dm.IBselect.IsEmpty then
                    begin
                      Result := Result + 'Erro: Cód. Barras '+tmp+' Já Foi cadastrado em: ' + dm.IBselect.fieldbyname('cod').AsString + '-' + dm.IBselect.fieldbyname('nome').AsString + #13;
                    end;

                  dm.IBselect.Close;
                end;

            if acctmp = '' then acctmp := acctmp + '-' + tmp + '-'
              else acctmp := acctmp + tmp + '-';
         end;
            //ShowMessage(acctmp);
          end;
        ClientDataSet1.Next;
      end;
  finally
    ClientDataSet1.First;
    ClientDataSet1.EnableControls;
  end;
end;


procedure TForm48.lerProdutosParaDarEntrada(var lista : TItensProduto);
var
  i : integer;
  qtd : currency;
begin
  lista := TItensProduto.Create;
  ClientDataSet1.DisableControls;
  ClientDataSet1.First;

  while not ClientDataSet1.Eof do
    begin
      i   := lista.Find(ClientDataSet1.fieldbyname('codigo').AsInteger);
      qtd := ClientDataSet1.fieldbyname('QUANTIDADE_ENT').AsCurrency;
      if qtd = 0 then qtd := 1;

      if i = -1 then
        begin
          i := lista.Add(TregProd.Create);

          lista[i].PERC_ICM  := StrToCurrDef(ClientDataSet1.FieldByName('PRECO_ATUAL').AsString, 0);
          if lista[i].PERC_ICM = 0 then lista[i].PERC_ICM  := StrToCurrDef(ClientDataSet1.FieldByName('PRECO_NOVO').AsString, 0);
          lista[i].cod      := ClientDataSet1.fieldbyname('codigo').AsInteger;
          lista[i].preco    := ClientDataSet1.fieldbyname('PRECO_NFE').AsCurrency;
          lista[i].total    := ClientDataSet1.fieldbyname('total').AsCurrency;
          lista[i].unid     := ClientDataSet1.fieldbyname('UNID_ENTRADA').AsString;
          lista[i].unid2    := ClientDataSet1.fieldbyname('UNID_VENDA').AsString;
          lista[i].codbar   := ClientDataSet1.fieldbyname('nota').AsString;
          lista[i].nome     := ClientDataSet1.fieldbyname('REF_NFE').AsString;
          lista[i].quant    := Arredonda(ClientDataSet1.fieldbyname('QUANTIDADE_NFE').AsCurrency * qtd, 2);
          lista[i].ncm      := ClientDataSet1.fieldbyname('ncm').AsString;

          lista[i].preco := StrToCurrDef(ClientDataSet1.FieldByName('PRECO_COMPRA').AsString, 0);
          if lista[i].preco = 0 then lista[i].preco := Arredonda(ClientDataSet1.FieldByName('PRECO_NFE').AsCurrency / funcoes.verValorUnidade(ClientDataSet1.FieldByName('UNID_ENTRADA').AsString), 2);
        end
      else
        begin
          lista[i].quant := lista[i].quant + Arredonda(ClientDataSet1.fieldbyname('QUANTIDADE_NFE').AsCurrency * qtd, 2);
          lista[i].total := lista[i].total + ClientDataSet1.fieldbyname('total').AsCurrency;
        end;

      ClientDataSet1.Next;
    end;

  ClientDataSet1.EnableControls;  
end;

procedure TForm48.limpaOK();
begin
  ClientDataSet1.DisableControls;
  ClientDataSet1.First;

  while not ClientDataSet1.Eof do begin
    ClientDataSet1.Edit;
    ClientDataSet1.FieldByName('ok').AsString := '';
    ClientDataSet1.Post;
    ClientDataSet1.Next;
  end;
  
  ClientDataSet1.First;
  ClientDataSet1.EnableControls;
end;

end.
